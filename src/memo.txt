리덕스 미들웨어
리덕스 미들웨어는 리덕스가 지니고 있는 핵심 기능으로, Context API 또는 MobX를 사용하는것과 차별화가 되는 부분이다.

액션 → 미들웨어 → 리듀서 → 스토어
리덕스 미들웨어를 사용하면 액션이 디스패치 된 다음, 리듀서에서 해당 액션을 받아와서 업데이트하기 전에 추가적인 작업을 할 수 있다.

여기서 언급한 추가적인 작업들은 아래와 같은것들이 있다.
▷ 특정 조건에 따라 액션이 무시되게 만들 수 있다.
▷ 액션을 콘솔에 출력하거나, 서버쪽에 로깅을 할 수 있다.
▷ 액션이 디스패치 됐을 때 이를 수정해서 리듀서에게 전달되도록 할 수 있다.
▷ 특정 액션이 발생했을 때 이에 기반하여 다른 액션이 발생되도록 할 수 있다.
▷ 특정 액션이 발생했을 때 특정 자바스크립트 함수를 실행시킬 수 있다.

보통 리덕스에서 미들웨어를 사용하는 주된 사용 용도는 비동기 작업을 처리 할 때다.
예로 리액트앱에서 만약 백엔드 API를 연동해야된다면, 리덕스 미들웨어를 사용해서 처리를한다.

리덕스 미들웨어는 누구드닞 만들어서 사용 할 수 있지만, 일반적으로 리덕스 미들웨어 라이브러리를 설치해서 사용한다.
비동기작업에 관련된 미들웨어 라이브러리는 아래에 이름과 링크가 있다.
redux-thunk → https://github.com/reduxjs/redux-thunk
redux-saga → https://github.com/redux-saga/redux-saga
redux-observable → https://redux-observable.js.org/
redux-promise-middleware  → https://www.npmjs.com/package/redux-promise-middleware

이 외에도 다른 라이브러리들이 있지만 많이 쓰는것들은 위에 네개가 대표적이다.

redux-saga와 redux-observable의 경우엔 특정 액션을 모니터링 할 수도 있어서 특정 액션이 디스패치됐을때 원하는 함수를 호출하거나 라우터를 통해 다른주소로 이동하는게 가능하다.

$ npx create-react-app learn-redux-middleware
$ yarn add redux react-redux


2. 미들웨어
실무에서 리덕스 미들웨어를 직접 만들일은 거의 없다. 직접 만들어보면 미들웨어가 어떤 역할을 하는지 이해하기 쉬워진다.

리덕스 미들웨어의 템플릿
리덕스 미들웨어를 만들 때 아래 템플릿을 사용한다
https://redux.js.org/tutorials/fundamentals/part-4-store#middleware
const middleware = store => next => action => {
  // 하고 싶은 작업...
}

미들웨어도 하나의 함수로, 함수를 연달아서 두번 리턴하는 함수다.
function middleware(store) {
  return function (next) {
    return function (action) {
      // 하고 싶은 작업...
    };
  };
};
각 함수에서 받아오는 파라미터가 어떤 것을 의미하는지 알아봐야 한다.

1. store는 리덕스 스토어 인스턴스로 이 안에는 dispatch, getState, subscribe 내장함수들이 들어있다.

2. next 는 액션을 다음 미들웨어에게 전달하는 함수다. next(action) 이런 형태로 사용한다.
만약 다음 미들웨어가 없다면 리듀서에게 액션을 전달해준다. 만약 next를 호출하지 않게된다면 액션이 무시처리되서 리듀서에게 전달되지 않는다.

3. action은 현재 처리하고있는 액션객체다
      ↙ ← store.dispatch
     ↓     ↑
액션 → 미들웨어1 → next → 미들웨어2
                            ↓
                           next
                            ↓
                          리듀서
                            ↓
                          스토어

미들웨어는 ↑ 위와 같은 구조로 ↑ 작동한다. 리덕스 스토어에는 여러개의 미들웨어를 등록 할 수 있다.
새로운 액션이 디스패치 되면 첫 번째로 등록한 미들웨어가 호출된다. 만약 미들웨어에서 next(action)을 호출하게 되면 다음 미들웨어로 액션이 넘어간다.
또한 미들웨어에서 store.dispatch 를 사용하면 다른 액션을 추가적으로 발생시킬 수 있다.


redux-thunk
redux-thunk는 리덕스에서 비동기 작업을 처리 할 때 가장 많이 사용하는 미들웨어다.
이 미들웨어를 사용하면 액션객체가 아닌 함수를 디스패치 할 수 있다.
리덕스 공식 매뉴얼에서도 비동기 작업을 처리하기 위하여 미들웨어를 사용하는 예시를 보여주고있다.
const thunk = store => next => action =>
  typeof action === 'function'
    ? action(store.dispatch, store.getState)
    : next(action)

실제 ↑ redux-thunk의 코드는 위와 유사하다.
redux-thunk → https://github.com/reduxjs/redux-thunk/blob/master/src/index.js
추가 기능을 위하여 몇 줄이 조금 더 추가됐을 뿐이다.
코드를 열어보면 14줄밖에 되지 않지만, 그런 라이브러리가 주간 다운로드수가 140만대다.

이 미들웨어를 사용하면 함수를 디스패치 할 수 있는데, 함수를 디스패치 할 때에는 해당 함수에서 dispatch와 getState를 파라미터로 받아와한다.
이 함수를 만들어주는 함수를 thunk라고 부른다.

↓아래는 thunk의 사용 예제이다.
const getComments = () => (dispatch, getState) => {
  // 이 안에서는 액션을 dispatch 할 수도 있고
  // getState를 사용하여 현재 상태도 조회 할 수 있다.
  const id = getState().post.activeId;

  // 요청이 시작했음을 알리는 액션
  dispatch({ type: 'GET_COMMENTS' });

  // 댓글을 조회하는 프로미스를 반환하는 getComments 가 있다고 가정해보자.
  api
    .getComments(id) // 요청을 하고
    .then(comments => dispatch({ type: 'GET_COMMENTS_SUCCESS', id, comments })) // 성공시
    .catch(e => dispatch({ type: 'GET_COMMENTS_ERROR', error: e })); // 실패시
};

thunk 함수에서 async/await를 사용해도 상관 없다.


redux-thunk로 프로미스 다루기
프로미스에 대해 잘 알고있다는 전제조건하에 진행되기때문에 따로 공부를 해야한다.
https://learnjs.vlpt.us/async/
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise



API 재로딩 문제 해결하기
포스트목록 재로딩 문제 해결하기
포스트 목록이 재로딩 되는 문제를 해결하는방법은 두가지가 있다.

1. 데이터가 이미 존재한다면 요청을 하지 않도록 하는 방법이다.

2. 로딩을 새로 하지만 로딩중...을 띄우지 않는 방법이다. 두번쨰 장점은 사용자에게 좋은 경험을 제공하면서 뒤로가기를 통해 다시 포스트 목록을 조회할 때 최신 데이터를 보여 줄 수 있다.


포스트 조회시 재로딩 문제 해결하기
특정 포스트를 조회하는 과정에서 재로딩 문제를 해결하려면, 방급했던 방식으로 처리 할 수 없다.
어떤 파라미터가 주어졌냐에 따라 다른 결과물이 있다.

이 문제를 해결하는 두가지 방법이 있다.
1. 컴포넌트가 언마운트 될 때 포스트 내용을 비우도록 하는것이다.
이 작업을 하려면 posts 리덕스 모듈에 CLEAR_POST 라는 액션을 준비해야한다.
PostContainer 컴포넌트의 useEffect 의 cleanup 함수 (useEffect 에서 반환하는 함수)에서 해당 액션을 디스패치해주면 된다.

containers/PostContainer.js 에서 만든 내용 참고.
포스트 페이지에서 떠날때 마다 포스트를 비우게 되므로, 다른 포스트를 읽을 때 이전 포스트가 보여지는 문제가 해결된다.
위 방법은 편하고 쉽지만 아쉬운점이 있다.
이미 읽었던 포스트를 불러오려고 할 경우 새로 요청을 한다.

이 문제를 해결하려면 posts 모듈에서 관리하는 상태의 구조를 바꿔야한다.
{
  posts: {
    data,
    loading,
    error
  },
  post: {
    data,
    loading,
    error,
  }
}
↑이렇게 되어있는 코드를
↓아래처럼 구현해야 한다.
{
  posts: {
    data,
    loading,
    error
  },
  post: {
    '1': {
      data,
      loading,
      error
    },
    '2': {
      data,
      loading,
      error
    },
    [id]: {
      data,
      loading,
      error
    }
  }
}

이를 진행하려면 기존에 asyncUtils 에 만든 여러 함수를 커스터마이징 해야하는데, 기존 함수를 수정하는 대신에 새로운 이름으로 다음 함수들을 작성해야한다.


thunk에서 라우터 연동하기
프로젝트를 개발하다보면, thunk 함수 내에서 라우터를 사용해야 될 때도 있다.
ex. 로그인 요청을 하는데 로그인이 성공 할 시 / 경로로 이동시키고, 실패 할 시 경로를 유지 하는 형태로 구현 할 수 있다.



json-server
프런트엔드 개발 연습을 하게 될 때마다 연습을 하는 것 분인데 직접 백엔드 개발을 하는것은 귀찮기도하고, 백엔드 지식이 없으면 힘들다.
연습을 위해서 가짜 API 서버를 만들건데, 이 때 사용되는 도구가  json-server다.
이 도구를 사용하면 json 파일 하나만 있으면 연습용 서버를 쉽게 구성 할 수 있다.



CORS 와 Webpack DevServer Proxy
브라우저에서 기본적으로 API를 요청 할 때에는 브라우저의 현재 주소와 API 의 주소의 도메인이 일치해야만 데이터를 접근 할 수 있게 되어 있다.
만약 다른 도메인에서 API를 요청해서 사용 할 수 있게 해주려면 CORS 설정이 필요하다.

json-server 로 만든 서버의 경우엔 모든 도메인을 허용해주는 CORS 규칙이 적용되어있다. 하지만 Open API를 만드는게 아니라면 모든 도메인을 허용하면 안된다.
만약 하게 되더라도 특정 도메인만 허용을 해주어야 한다.

나중에 실제 서비스를 개발하게 될 때 서버의 PAI를 요청해야할 때, localhost:3000 에서 들어오는 것이 차단되기 때문에 서버 쪽에 해당 도메인을 허용하도록 구현을 해야한다.
백엔드 개발자가 따로 있다면 백엔드 개발자에게 해당 도메인을 허용해달라고 요청을하면 되지만 굳이 그럴 필요는 없다.
웹팩 개발서버에서 제공하는 Proxy라는 기능을 사용하면 된다.

proxy 설정하기

브라우저 ← → 개발서버
              ↑ ↓
             프록시
              ↑ ↓
            백엔드서버

웹팩 개발서버의 프록시를 사용하게 되면, 브라우저 API 를 요청 할 때 백엔드 서버에 직접적으로 요청을 하지 않고, 현재 개발서버의 주소로 요청을 하게 된다.
웹팩 개발 서버에서 해당 요청을 받아 그대로 백엔드 서버로 전달하고, 백엔드 서버에서 응답한 내용을 다시 브라우저쪽으로 반환한다.
웹팩 개발서버의 proxy 설정은 원래 웹팩 설정을 통해서 적용을 하지만, 
CRA 를 통해 만든 리액트 프로젝트에서는 package.json 에서 "proxy" 값을 설정하여 쉽게 적용 할 수 있다.
링크 참고 → https://create-react-app.dev/docs/proxying-api-requests-in-development/

나중에 프로젝트를 완성하게 되서 배포하게 되는 경우, 리액트로 만든 서비스와 API가 동일한 도메인에서 제공되는 경우 이대로 진행하면 된다.
만약에 API의 도메인과 섭비스의 도메인이 다르다면 (예: 서비스는 velog.io, API 는 api.velog.io), axios 의 글로벌 baseURL 을 설정하면 된다.
baseURL 링크 → https://github.com/axios/axios#global-axios-defaults

예시로 ↓ 아래처럼 index.js에서 다음과 같이 작성하면 된다.
axios.defaults.baseURL = process.env.NODE_ENV === 'development' ? '/' : 'https://api.velog.io/';

process.env.NODE_ENV는 현재 환경이 프로덕션인지 개발모드인지 볼 수 있는 값이다.
→ https://create-react-app.dev/docs/adding-custom-environment-variables/

↑위와 같이 설정하게 된다면, 개발환경에서 프록시 서버쪾으로 요청하고, 프로덕션에서 실제 API 서버로 요청을 하게된다.
이러한 설정은 아까 언급한것처럼 API 도메인이 실서비스의 도메인과 다를때만 사용하면 된다.

프로젝트를 개발할때 proxy를 사용하는게 필수는 아니지만, 사용하게 된다면 백엔드쪽에서의 불필요한 코드를 아낄 수 있다.
백엔드에서 개발서버를 위한 CORS 설정을 안해도 되니까 꽤 유용한 기능이다.



redux-saga
redux-saga → https://github.com/redux-saga/redux-saga
redux-saga는 redux-thunk 다음으로 가장 많이 사용되는 라이브러리다.
redux-thunk의 경우엔 함수를 디스패치 할 수 있게 해주는 미들웨어다. 
redux-saga의 경우엔, 액션을 모니터링하고 있다가, 특정 액션이 발생하면 이에 따라 특정 작업을 하는 방식으로 사용한다.
여기서 특정 작업이란, 특장 자바스크립트를 실행하는 것 일수도 있고, 다른 액션을 디스패치 하는 것 일수도 있고, 현재 상태를 불러오는 것 일수도 있다.


redux-saga는 redux-thunk로 못하는 다양한 작업들을 처리 할 수 있다. ↓
1. 비동기 작업을 할 때 기존 요청을 취소 처리 할 수 있다.
2. 특정 액션이 발생했을 때 이에 따라 다른 액션이 디스패치되게끔 하거나, 자바스크립트 코드를 실행 할 수 있다.
3. 웹소켓을 사용하는 경우 Channel 이라는 기능을 사용하여 더욱 효율적으로 코드를 관리 할 수 있다.
    https://medium.com/@pierremaoui/using-websockets-with-redux-sagas-a2bf26467cab
4. API 요청이 실패했을 때 재요청하는 작업을 할 수 있다.
이 외에도 다양한 까다로운 비동기 작업들을 redux-saga를 사용하여 처리 할 수 있다.


redux-saga는 다양한 상황에 쓸 수 있는 만큼, 제공되는 기능도 많고, 사용방법도 진입장벽이 높다.
자바스크립트 초심자라면 생소할만한 Generator 문법을 사용한다. 이 문법을 이해하지 못한다면 redux-saga를 배우는 것이 매우 어려우니, 
아 문법부터 작동방식을 먼저 알아야한다.
Generator → https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Generator

Generator 문법 배우기
이 문법의 핵심 기능은 함수를 작성 할 떄 함수를 특정 구간에 멈춰놓을 수도 있고, 원할 때 다시 돌아가게 할 수도 있다.
그리고 결과값을 여러번 반환 할 수 있다.

↓ 예를들어서 아래와 같은 함수가 있다고 가정해보자.
function weirdFunction() {
  return 1;
  return 2;
  return 3;
  return 4;
  return 5;
}

함수에서 값을 여러번에 걸쳐서 반환하는것은 불가능하다. 이 함수는 호출 할 때 마다 무조건 1을 반환하게 된다.
하지만 제어네이터 함수를 사용하면 함수에서 값을 순차적으로 반환할 수 있다.
함수의 흐름을 도중에 멈춰놓았다가 나중에 이어서 진행 할 수 있다.

↓ 크롬 개발자도구의 콘솔에서 아래의 함주를 작성해보자.
function* generatorFunction() {
    console.log('안녕하세요?');
    yield 1;
    console.log('제너레이터 함수');
    yield 2;
    console.log('function*');
    yield 3;
    return 4;
}

제너레이터 함수를 만들 때에는 function* 이라는 키워드를 사용한다.
제너레이터 함수를 호출 했을 떄 한 객체가 반환되는데, 이를 제너레이터라고 부른다.
↓ 함수를 작성한 뒤에 아래 코드를 사용해서 제너레이터를 생성해보자.
const generator = generatorFunction();

제너레이터 함수를 호출한다고 해서 해당 함수 안의 코드가 바로 시작되지 않는다.
generator.next() 를 호출해야만 코드가 실행되며, yield를 한 값을 반환하고 코드의 흐름을 멈춘다.
코드의 흐름이 멈추고 나서 generator.next() 를 다시 호출하면 흐름이 이어서 다시 시작된다.


제너레이터 함수의 또다른 예시로, next 를 호출 할 때 인자를 전달하여 이를 제너레이터 함수 내부에서 사용 할 수도 있다.
function* sumGenerator() {
    console.log('sumGenerator이 시작됐습니다.');
    let a = yield;
    console.log('a값을 받았습니다.');
    let b = yield;
    console.log('b값을 받았습니다.');
    yield a + b;
}

Generator로 액션 모니터링하기
redux-saga는 액션을 모니터링 할 수 있다. 
Generator를 통해 모니터링이 어떻게 이루어지는지 ↓ 아래의 예제코드를 크롬 개발자 도구 콘솔에 적어서 따라해보자.
function* watchGenerator() {
    console.log('모니터링 시작!');
    while(true) {
        const action = yield;
        if (action.type === 'HELLO') {
            console.log('안녕하세요?');
        }
        if (action.type === 'BYE') {
            console.log('안녕히가세요.');
        }
    }
}

redux-saga에서는 이러한 원리로 액션을 모니터링하고, 특정 액션이 발생했을때 우리가 원하는 자바스크립트 코드를 실행시켜준다.

리덕스 사가 설치 및 비동기 카운터 만들기.
기존에 thunk를 사용해서 구현했던 비동기 카운터 기능을 이번에는 redux-saga를 사용하여 구현해햐한다.
일단 redux-saga 라이브러리를 설치먼저 해야한다.
$ yarn add redux-saga

redux-saga/effects 에는 다양한 유틸함수들이 들어있다. 여기서 사용한 put 이란 함수가 매우 중요하다. 이함수를 사용해서 새 액션을 디스패치 할 수 있다.
takeEvery, takeLatest 이 함수들은 액션을 모니터링하는 함수다. takeEvery는 특정 액션 타입에 대하여 디스패치되는 모든 액션들을 처리한다.
takeLatest는 특정 액션 타입에 대하여 디스패치된 가장 마지막 액션만을 처리하는 함수다.
ex. 특정 액션을 처리하고 있는 동안 동일한 타입의 새로운 액션이 디스패치되면 기존에 하던 작업을 무시 처리하고 새로운 작업을 시작한다.



redux-saga 로 프로미스 다루기
thunk함수를 만들어서 이 함수가 디스패치 될 때 비동기 작업을 처리하고, 액션 객체를 디스패치하거나 스토어의 현재 상태를 조회 할 수 있다.
↓ 아래는 redux-thunk를 배울 때 사용했던 thunk 함수다.
export const getPosts = () => async dispatch => {
  dispatch({ type: GET_POSTS }); // 요청이 시작됨
  try {
    const posts = postsAPI.getPosts(); // API 호출
    dispatch({ type: GET_POSTS_SUCCESS, posts }); // 성공
  } catch (e) {
    dispatch({ type: GET_POSTS_ERROR, error: e }); // 실패
  }
};

redux-thunk에서는 이렇게 함수를 만들어서 해당 함수에서 비동기 작업을 하고 필요한 시점에 특정 액션을 디스패피한다.
redux-saga는 비동기 작업을 처리 할 때 다른 방식으로 처리한다.

redux-saga에서는 특정 액션을 모니터링하도록 하고, 해당 액션이 주어지면 이에 따라 제너레이터 함수를 실행하여 비동기 작업을 처리 후 액션을 디스패치한다.

redux-thunk로 구현 할 때에는 getPosts 와 getPost 는 thunk 함수였는데, redux-saga를 사용하니 순수액션객체를 반환하는 액션생성함수로 구현 할 수 있다.
액션을 모니터링해서 특정 액션이 발생했을 때 호출할 사가 함수에서는 파라미터로 해당 액션을 받아올 수 있다.
getPostSaga의 경우엔 액션을 파라미터로 받아와서 해당 액션의 id 값을 참조 할 수 있다.

dispatch({ type: GET_POST, payload: 1, meta: 1 })이란 코드가 실행되면 액션에서 action.payload값을 추출하여 API를 호출 할 때 인자로 넣어서 호출한다.
여기서 meta 값이 있는 이유는 우리가 이전에 만들었던 handleAsyncActionsById 를 호환시키기 위해서 있다.
만약 handleAsyncActionsById를 사용하지 않는다면 meta 를 생략해도 된다.

리팩토링을 하지 않을거라면 { type: GET_POST, id } 이런식으로 파라미터를 꼭 payload 라고 설정 할 필요는 없다.


// 프로미스를 처리하는 사가 리팩토링
↓ 아래는 기존에 작성했던 사가함수들이다.
function* getPostsSaga() {
  try {
    const posts = yield call(postsAPI.getPosts); // call 을 사용하면 특정 함수를 호출하고, 결과물이 반환 될 때까지 기다려줄 수 있다.
    yield put({
      type: GET_POSTS_SUCCESS,
      payload: posts
    }); // 성공 액션 디스패치
  } catch (e) {
    yield put({
      type: GET_POSTS_ERROR,
      error: true,
      payload: e
    }); // 실패 액션 디스패치
  }
}

// 액션이 지니고 있는 값을 조회하고 싶다면 action을 파라미터로 받아와서 사용 할 수 있다.
function* getPostSaga(action) {
  const param = action.payload;
  const id = action.meta;
  try {
    const post = yield call(postsAPI.getPostById, param); // API 함수에 넣어주고 싶은 인자는 call 함수의 두번째 인자부터 순서대로 넣어주면된다.
    yield put({
      type: GET_POST_SUCCESS,
      payload: post,
      meta: id
    });
  } catch (e) {
    yield put({
      type: GET_POST_ERROR,
      error: true,
      payload: e,
      meta: id
    });
  }
}

까다로운 사가 함수를 만들게 될 때에는 사가 함수 안에서 여러 종류의 비동기 작업을 할 수 있다.
↑ 위에 만든 기능처럼 단순히 하나의 API를 요청해서 결과물을 가지고 액션을 디스패치 하는일이 꽤나 많이 발생하기도 한다.

까다로운 작업을 할 때에는 사가 함수를 직접 작성하고,간단한 비동기 작업을 처리하는 경우 이전에 redux-thunk에서 사용한 
createPromiseThunk, createPromiseThunkById 를 만들어서 사용했던 것 처럼,
비슷한 방식으로 반복되는 로직들을 함수화 하여 재사용하면 훨씬 깔끔한 코드로 작성을 할 수 있고, 생산성도 높일 수 있다.



saga에서 라우터 연동하기
로그인 요청을 할 때 성공 할 시 특정 주소로 이동시키고, 실패 할 시엔 그대로 유지하는 기능을 구현 해야 된다면, 
컨테이너 컴포넌트에서 withRouter를 사용해서 구현을 하는 것 보다 사가 내부에서 처리를 하는것이 훨씬 편하다.



// 리액트 프로젝트에서 타입스크립트 사용하기
